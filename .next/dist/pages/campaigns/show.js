'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/home/webster/fs-7am/fullstack/kickstart/crowdcoin(v2)/pages/campaigns/show.js?entry';


var CampaignShow = function (_Component) {
  (0, _inherits3.default)(CampaignShow, _Component);

  function CampaignShow() {
    (0, _classCallCheck3.default)(this, CampaignShow);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumContribution = _props.minimumContribution,
          requestsCount = _props.requestsCount,
          approversCount = _props.approversCount,
          label = _props.label,
          desc = _props.desc;

      var items = [{
        header: manager,
        meta: 'Address of Manager',
        description: 'The manager created this campaign and can create requests to withdraw money',
        style: { overflowWrap: 'break-word' }
      }, {
        header: minimumContribution,
        meta: 'Minimum Contribution (wei)',
        description: 'You must contribute at least this much wei to become an approver'
      }, {
        header: requestsCount,
        meta: 'Number of Requests',
        description: 'A request tries to withdraw money from the contract. Requests must be approved by approvers'
      }, {
        header: approversCount,
        meta: 'Number of Approvers',
        description: 'Number of people who have already donated to this campaign'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Campaign Balance (ether)',
        description: 'The balance is how much money this campaign has left to spend.'
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, 'Campaign Details'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 16, __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }, _react2.default.createElement('div', { 'class': 'ui column grid', __source: {
          fileName: _jsxFileName,
          lineNumber: 81
        }
      }, _react2.default.createElement('div', { 'class': 'column', __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, _react2.default.createElement('div', { 'class': 'ui raised segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, _react2.default.createElement('a', { 'class': 'ui blue ribbon label', __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, 'Project OverView'), _react2.default.createElement('b', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, this.props.label), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, this.props.desc)))))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 101
        }
      }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 104
        }
      }, 'View Requests')))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var campaign, summary;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                campaign = (0, _campaign2.default)(props.query.address);
                _context.next = 3;
                return campaign.methods.getSummary().call();

              case 3:
                summary = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumContribution: summary[0],
                  balance: summary[1],
                  requestsCount: summary[2],
                  approversCount: summary[3],
                  manager: summary[4],
                  label: summary[5],
                  desc: summary[6]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJtaW5pbXVtQ29udHJpYnV0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwibGFiZWwiLCJkZXNjIiwiaXRlbXMiLCJoZWFkZXIiLCJtZXRhIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLHNGQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3ZDLDBCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxXQUFTRCxZQUFULEdBQXdCO0FBQ3RCLGtDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FB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