'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/home/webster/fs-7am/fullstack/kickstart/crowdcoin(v2)/pages/campaigns/new.js?entry';


var CampaignNew = function (_Component) {
  (0, _inherits3.default)(CampaignNew, _Component);

  function CampaignNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CampaignNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignNew.__proto__ || (0, _getPrototypeOf2.default)(CampaignNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      label: '',
      desc: '',
      minimumContribution: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createCampaign(_this.state.minimumContribution, _this.state.label, _this.state.desc).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/');
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CampaignNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, 'Create a Campaign'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, 'Project Title'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.label,
        onChange: function onChange(event) {
          return _this3.setState({ label: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }), _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, 'Project Description'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.desc,
        onChange: function onChange(event) {
          return _this3.setState({ desc: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }), _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'Minimum Contribution Amount'), _react2.default.createElement(_semanticUiReact.Input, {
        label: 'wei',
        labelPosition: 'right',
        value: this.state.minimumContribution,
        onChange: function onChange(event) {
          return _this3.setState({ minimumContribution: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { loading: this.state.loading, primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, 'Create!')));
    }
  }]);

  return CampaignNew;
}(_react.Component);

exports.default = CampaignNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25OZXciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsImxhYmVsIiwiZGVzYyIsIm1pbmltdW1Db250cmlidXRpb24iLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUNhbXBhaWduIiwic2VuZCIsImZyb20iLCJwdXNoUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImVycm9yIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsUG9zaXRpb24iLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTkEsSUFBSUEsZUFBZSxxRkFBbkI7OztBQVFBLElBQUlDLGNBQWMsVUFBVUMsVUFBVixFQUFzQjtBQUN0QywwQkFBVUQsV0FBVixFQUF1QkMsVUFBdkI7O0FBRUEsV0FBU0Qs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QU1ILGFBQU4seUJBQTJCO0FBQ3pCbEMsZUFBTyxLQURrQjtBQUV6QjBDLHVCQUFlLE9BRlU7QUFHekJYLGVBQU8sS0FBS2hDLEtBQUwsQ0FBV0csbUJBSE87QUFJekJzQyxrQkFBVSxTQUFTQSxRQUFULENBQWtCL0IsS0FBbEIsRUFBeUI7QUFDakMsaUJBQU93QixPQUFPaEIsUUFBUCxDQUFnQixFQUFFZixxQkFBcUJPLE1BQU1nQyxNQUFOLENBQWFWLEtBQXBDLEVBQWhCLENBQVA7QUFDRCxTQU53QjtBQU96Qkksa0JBQVU7QUFDUkMsb0JBQVV2RCxZQURGO0FBRVJ3RCxzQkFBWTtBQUZKO0FBUGUsT0FBM0IsQ0F0RUYsRUFrRkUsZ0JBQU1ILGFBQU4sQ0FBb0IsSUFBcEIsRUFBMEI7QUFDeEJDLGtCQUFVO0FBQ1JDLG9CQUFVdkQsWUFERjtBQUVSd0Qsc0JBQVk7QUFGSjtBQURjLE9BQTFCLENBbEZGLENBUEYsRUFnR0UsZ0JBQU1ILGFBQU4sMkJBQTZCLEVBQUVJLE9BQU8sSUFBVCxFQUFlSyxRQUFRLE9BQXZCLEVBQWdDQyxTQUFTLEtBQUs3QyxLQUFMLENBQVdJLFlBQXBELEVBQWtFZ0MsVUFBVTtBQUNyR0Msb0JBQVV2RCxZQUQyRjtBQUVyR3dELHNCQUFZO0FBRnlGO0FBQTVFLE9BQTdCLENBaEdGLEVBcUdFLGdCQUFNSCxhQUFOLDBCQUVFLEVBQUU5QixTQUFTLEtBQUtMLEtBQUwsQ0FBV0ssT0FBdEIsRUFBK0J5QyxTQUFTLElBQXhDLEVBQThDVixVQUFVO0FBQ3BEQyxvQkFBVXZELFlBRDBDO0FBRXBEd0Qsc0JBQVk7QUFGd0M7QUFBeEQsT0FGRixFQU9FLFNBUEYsQ0FyR0YsQ0FsQkssQ0FBUDtBQWtJRDtBQXZJd0IsR0FBRCxDQUExQjs7QUEwSUEsU0FBT3ZELFdBQVA7QUFDRCxDQXBOaUIsa0JBQWxCOztrQkFzTmVBLFciLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InO1xuaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yJztcbmltcG9ydCBfT2JqZWN0JGdldFByb3RvdHlwZU9mIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZic7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xudmFyIF9qc3hGaWxlTmFtZSA9ICcvaG9tZS93ZWJzdGVyL2ZzLTdhbS9mdWxsc3RhY2sva2lja3N0YXJ0L2Nyb3dkY29pbih2MikvcGFnZXMvY2FtcGFpZ25zL25ldy5qcz9lbnRyeSc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uLCBJbnB1dCwgTWVzc2FnZSB9IGZyb20gJ3NlbWFudGljLXVpLXJlYWN0JztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9MYXlvdXQnO1xuaW1wb3J0IGZhY3RvcnkgZnJvbSAnLi4vLi4vZXRoZXJldW0vZmFjdG9yeSc7XG5pbXBvcnQgd2ViMyBmcm9tICcuLi8uLi9ldGhlcmV1bS93ZWIzJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJy4uLy4uL3JvdXRlcyc7XG5cbnZhciBDYW1wYWlnbk5ldyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYW1wYWlnbk5ldywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2FtcGFpZ25OZXcoKSB7XG4gICAgdmFyIF9yZWYsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhbXBhaWduTmV3KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBDYW1wYWlnbk5ldy5fX3Byb3RvX18gfHwgX09iamVjdCRnZXRQcm90b3R5cGVPZihDYW1wYWlnbk5ldykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbGFiZWw6ICcnLFxuICAgICAgZGVzYzogJycsXG4gICAgICBtaW5pbXVtQ29udHJpYnV0aW9uOiAnJyxcbiAgICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgICBsb2FkaW5nOiBmYWxzZVxuICAgIH0sIF90aGlzLm9uU3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShldmVudCkge1xuICAgICAgICB2YXIgYWNjb3VudHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSwgZXJyb3JNZXNzYWdlOiAnJyB9KTtcblxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1O1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWIzLmV0aC5nZXRBY2NvdW50cygpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBhY2NvdW50cyA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkubWV0aG9kcy5jcmVhdGVDYW1wYWlnbihfdGhpcy5zdGF0ZS5taW5pbXVtQ29udHJpYnV0aW9uLCBfdGhpcy5zdGF0ZS5sYWJlbCwgX3RoaXMuc3RhdGUuZGVzYykuc2VuZCh7XG4gICAgICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50c1swXVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcblxuICAgICAgICAgICAgICAgIFJvdXRlci5wdXNoUm91dGUoJy8nKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTE7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsnY2F0Y2gnXSgyKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgZXJyb3JNZXNzYWdlOiBfY29udGV4dC50MC5tZXNzYWdlIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTQ6XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIF90aGlzMiwgW1syLCAxMV1dKTtcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkge1xuICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSgpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDYW1wYWlnbk5ldywgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIExheW91dCxcbiAgICAgICAge1xuICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogNDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2gzJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA0MVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ0NyZWF0ZSBhIENhbXBhaWduJ1xuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEZvcm0sXG4gICAgICAgICAgeyBvblN1Ym1pdDogdGhpcy5vblN1Ym1pdCwgZXJyb3I6ICEhdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDQzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgRm9ybS5GaWVsZCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDQ0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA0NVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ1Byb2plY3QgVGl0bGUnXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwge1xuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5sYWJlbCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5zZXRTdGF0ZSh7IGxhYmVsOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA0NlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2JyJywge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1MVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ1Byb2plY3QgRGVzY3JpcHRpb24nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwge1xuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5kZXNjLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNldFN0YXRlKHsgZGVzYzogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdicicsIHtcbiAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDU2XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICdNaW5pbXVtIENvbnRyaWJ1dGlvbiBBbW91bnQnXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwge1xuICAgICAgICAgICAgICBsYWJlbDogJ3dlaScsXG4gICAgICAgICAgICAgIGxhYmVsUG9zaXRpb246ICdyaWdodCcsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLm1pbmltdW1Db250cmlidXRpb24sXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShldmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0U3RhdGUoeyBtaW5pbXVtQ29udHJpYnV0aW9uOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1OFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2JyJywge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVzc2FnZSwgeyBlcnJvcjogdHJ1ZSwgaGVhZGVyOiAnT29wcyEnLCBjb250ZW50OiB0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSwgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogNjdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgeyBsb2FkaW5nOiB0aGlzLnN0YXRlLmxvYWRpbmcsIHByaW1hcnk6IHRydWUsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA2OFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0NyZWF0ZSEnXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYW1wYWlnbk5ldztcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtcGFpZ25OZXc7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25OZXciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsImxhYmVsIiwiZGVzYyIsIm1pbmltdW1Db250cmlidXRpb24iLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUNhbXBhaWduIiwic2VuZCIsImZyb20iLCJwdXNoUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImVycm9yIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsUG9zaXRpb24iLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTkEsSUFBSUEsZUFBZSxxRkFBbkI7OztBQVFBLElBQUlDLGNBQWMsVUFBVUMsVUFBVixFQUFzQjtBQUN0QywwQkFBVUQsV0FBVixFQUF1QkMsVUFBdkI7O0FBRUEsV0FBU0Qs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